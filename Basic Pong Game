# not written in OOP or Class style
import turtle

# Creating window for game
wn = turtle.Screen()
wn.title("Pong by Allen")
wn.bgcolor("grey")
wn.setup(width=800, height = 600)
wn.tracer(0) #stops window from updating, speeds up game

# Adding game objects (paddle and ball for this case). Every object needs a name

## Paddle A
paddle_a = turtle.Turtle()
paddle_a.speed(0) #speed of animation set to max for paddle
paddle_a.shape("square")
paddle_a.shapesize(stretch_wid=5, stretch_len=1)
paddle_a.color("white")
paddle_a.penup() #turtle program draws a line for motion. Pen up removes this
paddle_a.goto(-350, 0) #sets paddle

## Paddle B
paddle_b = turtle.Turtle()
paddle_b.speed(0)
paddle_b.shape("square")
paddle_b.shapesize(stretch_wid=5, stretch_len=1)
paddle_b.color("white")
paddle_b.penup()
paddle_b.goto(350, 0) 

## Ball
ball = turtle.Turtle()
ball.speed(0) 
ball.shape("square")
ball.color("white")
ball.penup() 
ball.goto(0, 0)
ball.dx = 0.1 # dx or dy is the change in pixels 
ball.dy = 0.1 # since both are +2, it will move diagonally right

## Pen (Turtle): To draw the scoreboard
pen = turtle.Turtle()
pen.speed(0)
pen.color("white")
pen.penup()
pen.hideturtle() #without this we will see the pen
pen.goto(0,260) #starts at this coord
pen.write("Player A: 0 Player B: 0", align="center", font=("Courier", 24, "normal"))

## Score
score_a = 0
score_b = 0

# Function (Paddle & ball movement in this case)

def paddle_a_up():
    y = paddle_a.ycor() #returns y coordinate, under turtle module
    y += 20 # add 20 pixels to y cor when function is called
    paddle_a.sety(y) # sets paddle to new y cor


def paddle_a_down():
    y = paddle_a.ycor() 
    y -= 20 
    paddle_a.sety(y)

def paddle_b_up():
    y = paddle_b.ycor() 
    y += 20 
    paddle_b.sety(y)

def paddle_b_down():
    y = paddle_b.ycor() 
    y -= 20 
    paddle_b.sety(y)
    
# Keyboard bindings
wn.listen() #listen for keyboard input
wn.onkeypress(paddle_a_up, 'w') # binds key to function
wn.onkeypress(paddle_a_down, 's')
wn.onkeypress(paddle_b_up, 'Up') # arrow keys capitalize
wn.onkeypress(paddle_b_down, 'Down')

# Main game loop
while True:
    ## everytime loop runs, it updates the window
    wn.update()
    ## Moving the ball, sets initial position and moves it according to set position
    ball.setx(ball.xcor() + ball.dx)
    ball.sety(ball.ycor() + ball.dy)
    ## Set border so ball won't fly off
    if ball.ycor() > 290:
        ball.sety(290)
        ball.dy *= -1
    if ball.ycor() < -290:
        ball.sety(-290)
        ball.dy *= -1
    if ball.xcor() > 390:
        ball.goto(0,0)
        ball.dx *= -1
        score_a += 1
        pen.clear()
        pen.write("Player A: {} Player B: {}".format(score_a, score_b), align="center", font=("Courier", 24, "normal"))
        # {} is print. It will print the arguments you write on the right
    if ball.xcor() < -390:
        ball.goto(0,0)
        ball.dx *= -1
        score_b += 1
        pen.clear()
        pen.write("Player A: {} Player B: {}".format(score_a, score_b), align="center", font=("Courier", 24, "normal"))
    ## Paddle ball collisions
    if (ball.xcor() > 340 and ball.xcor() < 350) and (ball.ycor() < paddle_b.ycor() + 40) and (ball.ycor()> paddle_b.ycor() - 40):
        #ballxcor()>340 means ball and paddle are touching, paddle length is 100, so ycor +- 50 is ball touching edge of paddle. Readjust to +- 40 because ball has length too
        ball.setx(340)
        ball.dx *= -1
    if (ball.xcor() < -340 and ball.xcor() > -350)  and (ball.ycor() < paddle_a.ycor() + 40) and (ball.ycor()> paddle_a.ycor() - 40):
        ball.setx(-340)
        ball.dx *= -1
